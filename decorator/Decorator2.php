<?php
/**
 * Created by PhpStorm.
 * User: wangjun
 * Date: 2018/3/14
 * Time: 上午9:55
 */

namespace decorator;

/**
 * 抽象构件(Component)角色：定义接口，用于接收类新增的功能。
 *
 * 具体构件(Concrete Component)角色：没有装饰过的裸类。
 *
 * 装饰(Decorator)角色：抽象装饰器，用于将具体装饰器调度。
 *
 * 具体装饰(Concrete Decorator)角色：增添装饰作用。
 *
 * terface Component
 * @package decorator
 */
interface Component{
    public function opreation();
}

abstract class Decorator implements Component{

    protected $_component;

    public function __construct(Component $component)
    {
        $this->_component = $component;
    }


    public function opreation()
    {
        $this->_component->opreation();
    }
}


class ConcreteDecoratorA extends Decorator{

    public function __construct(Component $component)
    {
        parent::__construct($component);
    }

    public function opreation()
    {
        parent::opreation(); // TODO: Change the autogenerated stub
        $this->addedOperationA();
    }


    private function addedOperationA(){
        echo "message <br>";
    }

}

class ConcreteCompontent implements Component{
    public function opreation()
    {
        // TODO: Implement opreation() method.
        echo "iphone <br>";
    }
}


$component = new ConcreteCompontent();
$decoratorA = new ConcreteDecoratorA($component);
$decoratorA->opreation();















